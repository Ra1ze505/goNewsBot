// Code generated by MockGen. DO NOT EDIT.
// Source: summary.go
//
// Generated by this command:
//
//	mockgen -source=summary.go -destination=../mocks/repository/summary_mock.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	repository "github.com/Ra1ze505/goNewsBot/src/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockSummaryRepositoryInterface is a mock of SummaryRepositoryInterface interface.
type MockSummaryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSummaryRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockSummaryRepositoryInterfaceMockRecorder is the mock recorder for MockSummaryRepositoryInterface.
type MockSummaryRepositoryInterfaceMockRecorder struct {
	mock *MockSummaryRepositoryInterface
}

// NewMockSummaryRepositoryInterface creates a new mock instance.
func NewMockSummaryRepositoryInterface(ctrl *gomock.Controller) *MockSummaryRepositoryInterface {
	mock := &MockSummaryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSummaryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummaryRepositoryInterface) EXPECT() *MockSummaryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetLatestSummary mocks base method.
func (m *MockSummaryRepositoryInterface) GetLatestSummary() (*repository.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSummary")
	ret0, _ := ret[0].(*repository.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSummary indicates an expected call of GetLatestSummary.
func (mr *MockSummaryRepositoryInterfaceMockRecorder) GetLatestSummary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSummary", reflect.TypeOf((*MockSummaryRepositoryInterface)(nil).GetLatestSummary))
}

// GetMessagesForLastDay mocks base method.
func (m *MockSummaryRepositoryInterface) GetMessagesForLastDay(channelID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesForLastDay", channelID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesForLastDay indicates an expected call of GetMessagesForLastDay.
func (mr *MockSummaryRepositoryInterfaceMockRecorder) GetMessagesForLastDay(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesForLastDay", reflect.TypeOf((*MockSummaryRepositoryInterface)(nil).GetMessagesForLastDay), channelID)
}

// HasSummaryToday mocks base method.
func (m *MockSummaryRepositoryInterface) HasSummaryToday(channelID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSummaryToday", channelID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSummaryToday indicates an expected call of HasSummaryToday.
func (mr *MockSummaryRepositoryInterfaceMockRecorder) HasSummaryToday(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSummaryToday", reflect.TypeOf((*MockSummaryRepositoryInterface)(nil).HasSummaryToday), channelID)
}

// SaveSummary mocks base method.
func (m *MockSummaryRepositoryInterface) SaveSummary(summary *repository.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSummary", summary)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSummary indicates an expected call of SaveSummary.
func (mr *MockSummaryRepositoryInterfaceMockRecorder) SaveSummary(summary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSummary", reflect.TypeOf((*MockSummaryRepositoryInterface)(nil).SaveSummary), summary)
}
