// Code generated by MockGen. DO NOT EDIT.
// Source: rate.go
//
// Generated by this command:
//
//	mockgen -source=rate.go -destination=../mocks/repository/rate_mock.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	repository "github.com/Ra1ze505/goNewsBot/src/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRateRepositoryInterface is a mock of RateRepositoryInterface interface.
type MockRateRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRateRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockRateRepositoryInterfaceMockRecorder is the mock recorder for MockRateRepositoryInterface.
type MockRateRepositoryInterfaceMockRecorder struct {
	mock *MockRateRepositoryInterface
}

// NewMockRateRepositoryInterface creates a new mock instance.
func NewMockRateRepositoryInterface(ctrl *gomock.Controller) *MockRateRepositoryInterface {
	mock := &MockRateRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRateRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateRepositoryInterface) EXPECT() *MockRateRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetLatestRate mocks base method.
func (m *MockRateRepositoryInterface) GetLatestRate() (*repository.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRate")
	ret0, _ := ret[0].(*repository.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRate indicates an expected call of GetLatestRate.
func (mr *MockRateRepositoryInterfaceMockRecorder) GetLatestRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRate", reflect.TypeOf((*MockRateRepositoryInterface)(nil).GetLatestRate))
}

// GetRates mocks base method.
func (m *MockRateRepositoryInterface) GetRates() (*repository.Rates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRates")
	ret0, _ := ret[0].(*repository.Rates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRates indicates an expected call of GetRates.
func (mr *MockRateRepositoryInterfaceMockRecorder) GetRates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRates", reflect.TypeOf((*MockRateRepositoryInterface)(nil).GetRates))
}

// SaveRate mocks base method.
func (m *MockRateRepositoryInterface) SaveRate(rate *repository.Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRate", rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRate indicates an expected call of SaveRate.
func (mr *MockRateRepositoryInterfaceMockRecorder) SaveRate(rate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRate", reflect.TypeOf((*MockRateRepositoryInterface)(nil).SaveRate), rate)
}
