// Code generated by MockGen. DO NOT EDIT.
// Source: weather.go
//
// Generated by this command:
//
//	mockgen -source=weather.go -destination=../mocks/repository/weather_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	repository "github.com/Ra1ze505/goNewsBot/src/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockWeatherRepositoryInterface is a mock of WeatherRepositoryInterface interface.
type MockWeatherRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockWeatherRepositoryInterfaceMockRecorder is the mock recorder for MockWeatherRepositoryInterface.
type MockWeatherRepositoryInterfaceMockRecorder struct {
	mock *MockWeatherRepositoryInterface
}

// NewMockWeatherRepositoryInterface creates a new mock instance.
func NewMockWeatherRepositoryInterface(ctrl *gomock.Controller) *MockWeatherRepositoryInterface {
	mock := &MockWeatherRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWeatherRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherRepositoryInterface) EXPECT() *MockWeatherRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetWeatherByCity mocks base method.
func (m *MockWeatherRepositoryInterface) GetWeatherByCity(city string) (*repository.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherByCity", city)
	ret0, _ := ret[0].(*repository.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherByCity indicates an expected call of GetWeatherByCity.
func (mr *MockWeatherRepositoryInterfaceMockRecorder) GetWeatherByCity(city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherByCity", reflect.TypeOf((*MockWeatherRepositoryInterface)(nil).GetWeatherByCity), city)
}
