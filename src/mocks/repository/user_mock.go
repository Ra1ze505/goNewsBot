// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=../mocks/repository/user_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	repository "github.com/Ra1ze505/goNewsBot/src/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdateUser mocks base method.
func (m *MockUserRepositoryInterface) CreateOrUpdateUser(user *repository.User) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateUser", user)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateUser indicates an expected call of CreateOrUpdateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateOrUpdateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateOrUpdateUser), user)
}

// GetUsersByMailingTime mocks base method.
func (m *MockUserRepositoryInterface) GetUsersByMailingTime(mailingTime time.Time) ([]*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByMailingTime", mailingTime)
	ret0, _ := ret[0].([]*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByMailingTime indicates an expected call of GetUsersByMailingTime.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUsersByMailingTime(mailingTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByMailingTime", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUsersByMailingTime), mailingTime)
}

// UpdateUserCityAndTimezone mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserCityAndTimezone(userID *int, city, timezone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCityAndTimezone", userID, city, timezone)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCityAndTimezone indicates an expected call of UpdateUserCityAndTimezone.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserCityAndTimezone(userID, city, timezone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCityAndTimezone", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserCityAndTimezone), userID, city, timezone)
}
