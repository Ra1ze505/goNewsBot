package repository

//go:generate mockgen -source=ml.go -destination=../mocks/repository/ml_mock.go -package=mock_repository

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"
)

const (
	summarySystemPrompt = `
   –¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ —Å–≤–æ–¥–∫–∏, —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞:
   1. –í—ã–≤–æ–¥–∏ –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π
   2. –§–æ—Ä–º–∞—Ç: –ø—É–Ω–∫—Ç—ã —Å üî∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
   3. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–π –ø—É–Ω–∫—Ç –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ
   4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ üî∏.
`
	summaryUserPrompt = `
   –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞:
   - –í—ã–±–µ—Ä–∏ 5-10 –ì–õ–ê–í–ù–´–• —Å–æ–±—ã—Ç–∏–π (–æ–±—ä–µ–¥–∏–Ω—è—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ)
   - –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç: –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å üî∏
   - –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
   - –°—Ç—Ä–æ–≥–æ 5-10 –ø—É–Ω–∫—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –º–∞–ª–æ - –¥–æ–ø–æ–ª–Ω–∏ –¥–æ 7 –≤–∞–∂–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
   - –û–±—ä—ë–º –≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: 1200-2500 —Å–∏–º–≤–æ–ª–æ–≤
   - –ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–æ–º–µ üî∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
   - –ú–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ –í–°–ï–ì–î–ê –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
   
   –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
   üî∏ –ü—É–Ω–∫—Ç 1
   
   üî∏ –ü—É–Ω–∫—Ç 2
   
   –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
`
)

type MLRepositoryInterface interface {
	SummarizeMessages(messages []string) (string, error)
}

type MLRepository struct {
	apiToken string
	client   *http.Client
}

type OpenRouterRequest struct {
	Model       string              `json:"model"`
	Messages    []OpenRouterMessage `json:"messages"`
	MaxTokens   int                 `json:"max_tokens"`
	Temperature float64             `json:"temperature"`
}

type OpenRouterMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type OpenRouterResponse struct {
	Choices []struct {
		Message struct {
			Content string `json:"content"`
		} `json:"message"`
	} `json:"choices"`
}

func NewMLRepository() (*MLRepository, error) {
	apiToken := os.Getenv("OPENROUTER_API_TOKEN")
	if apiToken == "" {
		return nil, fmt.Errorf("OPENROUTER_API_TOKEN environment variable must be set")
	}

	return &MLRepository{
		apiToken: apiToken,
		client:   &http.Client{Timeout: 250 * time.Second},
	}, nil
}

func cleanResponse(content string) string {
	content = regexp.MustCompile("```[a-zA-Z]*\n").ReplaceAllString(content, "")
	content = regexp.MustCompile("```").ReplaceAllString(content, "")
	content = regexp.MustCompile("---\n").ReplaceAllString(content, "")
	content = strings.TrimSpace(content)
	return content
}

func (r *MLRepository) SummarizeMessages(messages []string) (string, error) {
	// Combine all messages into one text
	combinedText := ""
	for _, msg := range messages {
		combinedText += msg + "\n\n"
	}

	reqBody := OpenRouterRequest{
		Model: "deepseek/deepseek-r1-0528-qwen3-8b:free",
		Messages: []OpenRouterMessage{
			{
				Role:    "system",
				Content: summarySystemPrompt,
			},
			{
				Role:    "user",
				Content: summaryUserPrompt + "\n" + combinedText,
			},
		},
		MaxTokens:   800,
		Temperature: 0.3,
	}

	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("error marshaling request: %w", err)
	}

	req, err := http.NewRequest("POST", "https://openrouter.ai/api/v1/chat/completions", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+r.apiToken)

	resp, err := r.client.Do(req)
	if err != nil {
		return "", fmt.Errorf("error making request: %w", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("error reading response: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API request failed with status %d: %s", resp.StatusCode, string(body))
	}

	var openRouterResp OpenRouterResponse
	if err := json.Unmarshal(body, &openRouterResp); err != nil {
		return "", fmt.Errorf("error parsing response: %w", err)
	}

	if len(openRouterResp.Choices) == 0 {
		return "", fmt.Errorf("no choices in response")
	}

	content := openRouterResp.Choices[0].Message.Content
	if content == "" {
		return "", fmt.Errorf("no content in response")
	}

	return cleanResponse(content), nil
}
