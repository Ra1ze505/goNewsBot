package repository

//go:generate mockgen -source=ml.go -destination=../mocks/repository/ml_mock.go -package=mock_repository

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	log "github.com/sirupsen/logrus"
)

const (
	summarySystemPrompt = `
  –¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–≤–æ–¥–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π. –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞:
  1. –ò–∑–ª–∞–≥–∞–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.
  2. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å üî∏. –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª.
  3. –í –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ –º–∞–∫—Å–∏–º—É–º 2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü—É–Ω–∫—Ç—ã —Ü–µ–ª—å–Ω—ã–µ, –Ω–µ —Ä–∞–∑–±–∏–≤–∞–π –∏ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π –∏—Ö –≤–Ω–µ —Å—Ç—Ä–æ–∫–∏.
  4. –ú–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ ‚Äî –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
  5. –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
  `

	summaryUserPrompt = `
  –í—ã–¥–µ–ª–∏ 5-10 –≥–ª–∞–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∏–∂–µ (–æ–±—ä–µ–¥–∏–Ω—è–π —Å—Ö–æ–∂–∏–µ). –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –º–∞–ª–æ ‚Äî –¥–æ–±–∞–≤—å –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤.
  
  –§–æ—Ä–º–∞—Ç:
  
  üî∏ –û–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ
  
  üî∏ –í—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ
  
  –ù–æ–≤–æ—Å—Ç–∏:
  `
)

type MLRepositoryInterface interface {
	SummarizeMessages(messages []string) (string, error)
}

type MLRepository struct {
	apiToken string
	client   *http.Client
}

type OpenRouterRequest struct {
	Model       string              `json:"model"`
	Messages    []OpenRouterMessage `json:"messages"`
	MaxTokens   int                 `json:"max_tokens"`
	Temperature float64             `json:"temperature"`
}

type OpenRouterMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type OpenRouterResponse struct {
	Choices []struct {
		Message struct {
			Content string `json:"content"`
		} `json:"message"`
	} `json:"choices"`
}

func NewMLRepository() (*MLRepository, error) {
	apiToken := os.Getenv("OPENROUTER_API_TOKEN")
	if apiToken == "" {
		return nil, fmt.Errorf("OPENROUTER_API_TOKEN environment variable must be set")
	}

	return &MLRepository{
		apiToken: apiToken,
		client:   &http.Client{Timeout: 250 * time.Second},
	}, nil
}

func cleanResponse(content string) string {
	content = regexp.MustCompile("```[a-zA-Z]*\n").ReplaceAllString(content, "")
	content = regexp.MustCompile("```").ReplaceAllString(content, "")
	content = regexp.MustCompile("---\n").ReplaceAllString(content, "")
	content = strings.TrimSpace(content)
	return content
}

func (r *MLRepository) SummarizeMessages(messages []string) (string, error) {
	// Combine all messages into one text
	combinedText := ""
	for _, msg := range messages {
		combinedText += msg + "\n\n"
	}

	reqBody := OpenRouterRequest{
		Model: "deepseek/deepseek-r1-0528-qwen3-8b:free",
		Messages: []OpenRouterMessage{
			{
				Role:    "system",
				Content: summarySystemPrompt,
			},
			{
				Role:    "user",
				Content: summaryUserPrompt + "\n" + combinedText,
			},
		},
		MaxTokens:   1000,
		Temperature: 0.3,
	}

	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("error marshaling request: %w", err)
	}

	req, err := http.NewRequest("POST", "https://openrouter.ai/api/v1/chat/completions", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+r.apiToken)

	resp, err := r.client.Do(req)
	if err != nil {
		return "", fmt.Errorf("error making request: %w", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("error reading response: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API request failed with status %d: %s", resp.StatusCode, string(body))
	}

	log.Infof("response from openrouter.ai: %s", string(body))

	var openRouterResp OpenRouterResponse
	if err := json.Unmarshal(body, &openRouterResp); err != nil {
		return "", fmt.Errorf("error parsing response: %w", err)
	}

	if len(openRouterResp.Choices) == 0 {
		return "", fmt.Errorf("no choices in response")
	}

	content := openRouterResp.Choices[0].Message.Content
	if content == "" {
		return "", fmt.Errorf("no content in response")
	}

	return cleanResponse(content), nil
}
