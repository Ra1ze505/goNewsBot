package repository

//go:generate mockgen -source=ml.go -destination=../mocks/repository/ml_mock.go -package=mock_repository

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"
)

const (
	summarySystemPrompt = `
–¢—ã ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –∫—Ä–∞—Ç–∫–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏–∑–ª–æ–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
`
	summaryUserPrompt = `
–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ, –Ω–µ –±–æ–ª—å—à–µ 2500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ 7 –ø—É–Ω–∫—Ç–æ–≤. 
–í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:
- –í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π.
- –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–µ –±–æ–ª–µ–µ 7 –≥–ª–∞–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, –≤—ã–±–∏—Ä–∞—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.
- –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –Ω–∞—á–∏–Ω–∞–π —Å üî∏.
- –ú–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–æ–¥–Ω—É).
- –ù–µ –ø—Ä–µ–≤—ã—à–∞–π –æ–±—â–∏–π –æ–±—ä—ë–º 2500 —Å–∏–º–≤–æ–ª–æ–≤.
- –ù–µ –ø–∏—à–∏ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã.

–û—Ç–≤–µ—Ç –æ—Ñ–æ—Ä–º–ª—è–π —Ç–∞–∫:  
üî∏ –ü–µ—Ä–≤—ã–π –∫–ª—é—á–µ–≤–æ–π –ø—É–Ω–∫—Ç

üî∏ –í—Ç–æ—Ä–æ–π –∫–ª—é—á–µ–≤–æ–π –ø—É–Ω–∫—Ç

‚Ä¶ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ 7 –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.
`
)

type MLRepositoryInterface interface {
	SummarizeMessages(messages []string) (string, error)
}

type MLRepository struct {
	apiToken string
	client   *http.Client
}

type OpenRouterRequest struct {
	Model     string              `json:"model"`
	Messages  []OpenRouterMessage `json:"messages"`
	MaxTokens int                 `json:"max_tokens"`
}

type OpenRouterMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type OpenRouterResponse struct {
	Choices []struct {
		Message struct {
			Content string `json:"content"`
		} `json:"message"`
	} `json:"choices"`
}

func NewMLRepository() (*MLRepository, error) {
	apiToken := os.Getenv("OPENROUTER_API_TOKEN")
	if apiToken == "" {
		return nil, fmt.Errorf("OPENROUTER_API_TOKEN environment variable must be set")
	}

	return &MLRepository{
		apiToken: apiToken,
		client:   &http.Client{Timeout: 250 * time.Second},
	}, nil
}

func cleanResponse(content string) string {
	content = regexp.MustCompile("```[a-zA-Z]*\n").ReplaceAllString(content, "")
	content = regexp.MustCompile("```").ReplaceAllString(content, "")
	content = regexp.MustCompile("---\n").ReplaceAllString(content, "")
	content = strings.TrimSpace(content)
	return content
}

func (r *MLRepository) SummarizeMessages(messages []string) (string, error) {
	// Combine all messages into one text
	combinedText := ""
	for _, msg := range messages {
		combinedText += msg + "\n\n"
	}

	reqBody := OpenRouterRequest{
		Model: "deepseek/deepseek-prover-v2:free",
		Messages: []OpenRouterMessage{
			{
				Role:    "system",
				Content: summarySystemPrompt,
			},
			{
				Role:    "user",
				Content: summaryUserPrompt,
			},
			{
				Role:    "user",
				Content: combinedText,
			},
		},
		MaxTokens: 700,
	}

	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("error marshaling request: %w", err)
	}

	req, err := http.NewRequest("POST", "https://openrouter.ai/api/v1/chat/completions", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+r.apiToken)

	resp, err := r.client.Do(req)
	if err != nil {
		return "", fmt.Errorf("error making request: %w", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("error reading response: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("API request failed with status %d: %s", resp.StatusCode, string(body))
	}

	var openRouterResp OpenRouterResponse
	if err := json.Unmarshal(body, &openRouterResp); err != nil {
		return "", fmt.Errorf("error parsing response: %w", err)
	}

	if len(openRouterResp.Choices) == 0 {
		return "", fmt.Errorf("no choices in response")
	}

	content := openRouterResp.Choices[0].Message.Content
	return cleanResponse(content), nil
}
